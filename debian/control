Source: spdlog
Maintainer: Debian Med Packaging Team <debian-med-packaging@lists.alioth.debian.org>
Uploaders: Michael R. Crusoe <crusoe@debian.org>
Section: libdevel
Priority: optional
Build-Depends: debhelper-compat (= 13),
               cmake,
               pkg-config,
               libsystemd-dev [linux-any],
               libfmt-dev (>= 9.0.0),
               pkg-kde-tools,
               catch2
Standards-Version: 4.6.1
Vcs-Browser: https://salsa.debian.org/med-team/spdlog
Vcs-Git: https://salsa.debian.org/med-team/spdlog.git
Homepage: https://github.com/gabime/spdlog
Rules-Requires-Root: no

Package: libspdlog-dev
Architecture: any
Multi-Arch: same
Depends: libspdlog1.10 (= ${binary:Version}),
         libfmt-dev (>= 9.0.0),
         catch2,
         ${misc:Depends}
Description: Very fast, header only or compiled, C++ logging library
 Features: Very fast - performance is the primary goal; Headers only; No
 dependencies - just copy and use; call style using the excellent cppformat
 library; ostream call style is supported too; Optional extremely fast
 asynchronous mode - using lockfree queues and other tricks to reach millions
 of calls/sec; Custom formatting; Multi/Single threaded loggers; Easily
 extendable with custom log targets (just implement a single function in the
 sink interface). Severity based filtering - threshold levels can be modified
 in runtime as well as in compile time.
 .
 Various log targets:
 Rotating log files, Daily log files, Console logging, Linux syslog.

Package: libspdlog1.10
Architecture: any
Multi-Arch: same
Section: libs
Depends: ${shlibs:Depends},
         ${misc:Depends}
Breaks: bear (<< 3.0.5-1),
        libear (<< 3.0.5-1),
        libpurify2.0 (<< 2.0.0-5+b2),
        nheko (<< 0.7.2-3+b1),
        purify (<< 2.0.0-5+b2),
        libspdlog1 (<< 1:1.10.0+ds-0.3)
Replaces: libspdlog1 (<< 1:1.10.0+ds-0.3)
Provides: ${spdlog:Provides}
Description: Very fast C++ logging library
 Features: Very fast - performance is the primary goal; Headers only; No
 dependencies - just copy and use; call style using the excellent cppformat
 library; ostream call style is supported too; Optional extremely fast
 asynchronous mode - using lockfree queues and other tricks to reach millions
 of calls/sec; Custom formatting; Multi/Single threaded loggers; Easily
 extendable with custom log targets (just implement a single function in the
 sink interface). Severity based filtering - threshold levels can be modified
 in runtime as well as in compile time.
 .
 Various log targets:
 Rotating log files, Daily log files, Console logging, Linux syslog.
 .
 This is the compiled version of the library.
